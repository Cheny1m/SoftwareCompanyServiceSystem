<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.sicnu.cs.dao.RemarksMapper">
  <resultMap id="BaseResultMap" type="cn.edu.sicnu.cs.model.Remarks">
    <id column="reid" jdbcType="BIGINT" property="reid" />
    <result column="retype" jdbcType="CHAR" property="retype" />
    <result column="reaffairt_id" jdbcType="BIGINT" property="reaffairtId" />
    <result column="restate" jdbcType="CHAR" property="restate" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="cn.edu.sicnu.cs.model.Remarks">
    <result column="recontent" jdbcType="LONGVARCHAR" property="recontent" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    reid, retype, reaffairt_id, restate
  </sql>
  <sql id="Blob_Column_List">
    recontent
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="cn.edu.sicnu.cs.model.RemarksExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from remarks
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="cn.edu.sicnu.cs.model.RemarksExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from remarks
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from remarks
    where reid = #{reid,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from remarks
    where reid = #{reid,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="cn.edu.sicnu.cs.model.RemarksExample">
    delete from remarks
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="cn.edu.sicnu.cs.model.Remarks">
    insert into remarks (reid, retype, reaffairt_id, 
      restate, recontent)
    values (#{reid,jdbcType=BIGINT}, #{retype,jdbcType=CHAR}, #{reaffairtId,jdbcType=BIGINT}, 
      #{restate,jdbcType=CHAR}, #{recontent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.edu.sicnu.cs.model.Remarks">
    insert into remarks
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="reid != null">
        reid,
      </if>
      <if test="retype != null">
        retype,
      </if>
      <if test="reaffairtId != null">
        reaffairt_id,
      </if>
      <if test="restate != null">
        restate,
      </if>
      <if test="recontent != null">
        recontent,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="reid != null">
        #{reid,jdbcType=BIGINT},
      </if>
      <if test="retype != null">
        #{retype,jdbcType=CHAR},
      </if>
      <if test="reaffairtId != null">
        #{reaffairtId,jdbcType=BIGINT},
      </if>
      <if test="restate != null">
        #{restate,jdbcType=CHAR},
      </if>
      <if test="recontent != null">
        #{recontent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="cn.edu.sicnu.cs.model.RemarksExample" resultType="java.lang.Long">
    select count(*) from remarks
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update remarks
    <set>
      <if test="record.reid != null">
        reid = #{record.reid,jdbcType=BIGINT},
      </if>
      <if test="record.retype != null">
        retype = #{record.retype,jdbcType=CHAR},
      </if>
      <if test="record.reaffairtId != null">
        reaffairt_id = #{record.reaffairtId,jdbcType=BIGINT},
      </if>
      <if test="record.restate != null">
        restate = #{record.restate,jdbcType=CHAR},
      </if>
      <if test="record.recontent != null">
        recontent = #{record.recontent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update remarks
    set reid = #{record.reid,jdbcType=BIGINT},
      retype = #{record.retype,jdbcType=CHAR},
      reaffairt_id = #{record.reaffairtId,jdbcType=BIGINT},
      restate = #{record.restate,jdbcType=CHAR},
      recontent = #{record.recontent,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update remarks
    set reid = #{record.reid,jdbcType=BIGINT},
      retype = #{record.retype,jdbcType=CHAR},
      reaffairt_id = #{record.reaffairtId,jdbcType=BIGINT},
      restate = #{record.restate,jdbcType=CHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="cn.edu.sicnu.cs.model.Remarks">
    update remarks
    <set>
      <if test="retype != null">
        retype = #{retype,jdbcType=CHAR},
      </if>
      <if test="reaffairtId != null">
        reaffairt_id = #{reaffairtId,jdbcType=BIGINT},
      </if>
      <if test="restate != null">
        restate = #{restate,jdbcType=CHAR},
      </if>
      <if test="recontent != null">
        recontent = #{recontent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where reid = #{reid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.edu.sicnu.cs.model.Remarks">
    update remarks
    set retype = #{retype,jdbcType=CHAR},
      reaffairt_id = #{reaffairtId,jdbcType=BIGINT},
      restate = #{restate,jdbcType=CHAR},
      recontent = #{recontent,jdbcType=LONGVARCHAR}
    where reid = #{reid,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.edu.sicnu.cs.model.Remarks">
    update remarks
    set retype = #{retype,jdbcType=CHAR},
      reaffairt_id = #{reaffairtId,jdbcType=BIGINT},
      restate = #{restate,jdbcType=CHAR}
    where reid = #{reid,jdbcType=BIGINT}
  </update>
</mapper>